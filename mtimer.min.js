"use strict";
/** Timer manager.
 *
 * Override global JS functions setTimeout() & setInterval()
 * to allow management task on them
 *
 * @author Damien Cuvillier <damien@gotan.io>
 * @License MIT
 *
 * Feel free to thanks: https://tinyurl.com/2kh78j52
 * */window.originalSetTimeout=window.setTimeout,window.originalSetInterval=window.setInterval,window.originalClearTimeout=window.clearTimeout,window.originalClearInterval=window.clearInterval,window.timers=[];class Timer{constructor(i,e,n,t){this.id=i,this.type=e,this.functionName=n,this.delay=t,this.startTime=new Date}}window.setTimeout=function(callbackFunction,delay,...args){let cmd="window.originalSetTimeout(callbackFunction,delay";for(let i=0;i<arguments.length;i++)cmd+=", args["+i+"]";cmd+=");";const id=eval(cmd);return window.originalSetTimeout(clearTimer,delay,id),window.timers.push(new Timer(id,"timeout",callbackFunction.name,delay)),id},window.setInterval=function(callbackFunction,delay,...args){let cmd="window.originalSetInterval(callbackFunction,delay";for(let i=0;i<args.length;i++)cmd+=", args["+i+"]";cmd+=");";const id=eval(cmd);return window.timers.push(new Timer(id,"interval",callbackFunction.name,delay)),id},window.clearTimeout=function(i){clearTimer(i),window.originalClearTimeout(i)},window.clearInterval=function(i){clearTimer(i),window.originalClearInterval(i)},window.clearTimer=function(i){let e=window.timers.filter((e=>e.id===i));if(e.length>0){"timeout"===e[0].type?window.originalClearTimeout(e[0].id):"interval"===e[0].type&&window.originalClearInterval(e[0].id);const i=window.timers.indexOf(e[0]);window.timers.splice(i,1)}},window.clearTimers=function(i){let e;e=null==i?window.timers:window.timers.filter((e=>e.type===i));const n=e.length;return e.forEach((i=>window.clearTimer(i.id))),n};
